/**
 * This file was generated automatically using scripts/fontmaking/Images2FontHeaders.py
 *
 * Font: Dina Italic Bold
 * Font Size: 8pt
 * Generated On: 13 October 2024 @ 7:57 PM
 *
 * License:
 *
 * Copyright (c) 2005-2013 Joergen Ibsen
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

#pragma once

#include "AbstractFont.h"

#include <vector>

namespace epaperapi::fonts {
class DinaItalicBold_8pt : public AbstractFont {
  private:
    const std::string charset =
        "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~ ";

  public:
    DinaItalicBold_8pt() {}
    uint8_t GetFontSize() const override { return 8; }
    uint8_t GetHeight() const override { return 13; }
    std::string GetFontName() override { return "Dina Italic Bold"; }
    std::string GetCharacterSet() const override { return charset; }
    const uint8_t* GetBitmapData() const override { return bitmap.data(); }
    const uint8_t* GetCharacterWidths() const override { return charWidths.data(); }

  private:
    const std::vector<uint8_t> charWidths = {7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
                                             7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
                                             7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
                                             7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7};

    const std::vector<uint8_t> bitmap = {
        0, 0,   243, 54,  250, 245, 246, 204, 224, 0,   0,   0, 0, 0,   113, 230, 195, 6,   24,  49,  248, 0,   0,   0,
        0, 0,   113, 176, 99,  142, 48,  193, 240, 0,   0,   0, 0, 0,   113, 176, 195, 3,   6,   216, 224, 0,   0,   0,
        0, 0,   56,  243, 109, 179, 127, 24,  48,  0,   0,   0, 0, 0,   249, 134, 15,  3,   6,   216, 224, 0,   0,   0,
        0, 0,   113, 134, 15,  51,  102, 216, 224, 0,   0,   0, 0, 3,   240, 97,  134, 24,  48,  193, 128, 0,   0,   0,
        0, 0,   113, 182, 199, 27,  102, 216, 224, 0,   0,   0, 0, 0,   113, 182, 108, 207, 6,   24,  224, 0,   0,   0,
        0, 0,   0,   3,   129, 159, 102, 216, 240, 0,   0,   0, 0, 96,  193, 135, 141, 155, 108, 217, 224, 0,   0,   0,
        0, 0,   0,   3,   141, 152, 96,  216, 224, 0,   0,   0, 0, 12,  24,  51,  205, 155, 108, 216, 240, 0,   0,   0,
        0, 0,   0,   3,   141, 159, 96,  216, 224, 0,   0,   0, 0, 28,  96,  199, 198, 12,  48,  96,  192, 0,   0,   0,
        0, 0,   0,   3,   205, 155, 108, 216, 240, 193, 142, 0, 0, 96,  193, 135, 141, 155, 108, 217, 176, 0,   0,   0,
        0, 24,  48,  3,   131, 6,   24,  48,  240, 0,   0,   0, 0, 24,  48,  7,   131, 6,   12,  48,  96,  199, 0,   0,
        0, 96,  193, 134, 109, 158, 120, 217, 152, 0,   0,   0, 0, 112, 96,  195, 6,   12,  48,  96,  224, 0,   0,   0,
        0, 0,   0,   6,   207, 223, 234, 205, 152, 0,   0,   0, 0, 0,   0,   7,   141, 155, 108, 217, 176, 0,   0,   0,
        0, 0,   0,   3,   141, 155, 108, 216, 224, 0,   0,   0, 0, 0,   0,   3,   198, 205, 182, 108, 243, 6,   12,  0,
        0, 0,   0,   3,   205, 155, 108, 216, 240, 193, 131, 0, 0, 0,   0,   6,   206, 216, 96,  193, 128, 0,   0,   0,
        0, 0,   0,   3,   141, 140, 12,  216, 224, 0,   0,   0, 0, 0,   96,  199, 198, 12,  48,  96,  120, 0,   0,   0,
        0, 0,   0,   6,   205, 155, 108, 216, 240, 0,   0,   0, 0, 0,   0,   6,   205, 142, 28,  48,  64,  0,   0,   0,
        0, 0,   0,   6,   108, 245, 234, 124, 176, 0,   0,   0, 0, 0,   0,   6,   103, 134, 24,  121, 152, 0,   0,   0,
        0, 0,   0,   6,   205, 155, 108, 216, 240, 193, 142, 0, 0, 0,   0,   7,   193, 142, 48,  193, 240, 0,   0,   0,
        0, 0,   56,  243, 102, 223, 54,  205, 152, 0,   0,   0, 0, 0,   241, 182, 207, 26,  102, 205, 240, 0,   0,   0,
        0, 0,   113, 182, 12,  48,  96,  216, 224, 0,   0,   0, 0, 0,   241, 179, 108, 219, 102, 217, 224, 0,   0,   0,
        0, 0,   249, 134, 15,  24,  96,  193, 240, 0,   0,   0, 0, 0,   249, 134, 15,  24,  96,  193, 128, 0,   0,   0,
        0, 0,   113, 182, 12,  55,  102, 216, 224, 0,   0,   0, 0, 0,   217, 182, 207, 155, 108, 217, 176, 0,   0,   0,
        0, 0,   240, 195, 6,   12,  48,  97,  224, 0,   0,   0, 0, 0,   120, 48,  97,  131, 102, 216, 224, 0,   0,   0,
        0, 0,   201, 182, 207, 27,  102, 205, 152, 0,   0,   0, 0, 0,   193, 134, 12,  24,  96,  193, 248, 0,   0,   0,
        0, 0,   137, 183, 238, 217, 230, 205, 152, 0,   0,   0, 0, 1,   155, 55,  110, 247, 102, 205, 152, 0,   0,   0,
        0, 0,   113, 182, 108, 243, 102, 216, 224, 0,   0,   0, 0, 0,   241, 179, 109, 158, 48,  193, 128, 0,   0,   0,
        0, 0,   113, 182, 108, 243, 102, 216, 248, 48,  0,   0, 0, 0,   241, 182, 111, 158, 102, 205, 152, 0,   0,   0,
        0, 0,   243, 54,  6,   6,   12,  216, 224, 0,   0,   0, 0, 1,   248, 193, 134, 12,  48,  96,  192, 0,   0,   0,
        0, 0,   217, 182, 205, 155, 108, 216, 224, 0,   0,   0, 0, 1,   155, 54,  205, 158, 56,  96,  192, 0,   0,   0,
        0, 0,   217, 182, 109, 159, 126, 217, 16,  0,   0,   0, 0, 1,   155, 51,  195, 12,  60,  205, 152, 0,   0,   0,
        0, 1,   155, 54,  207, 12,  24,  96,  192, 0,   0,   0, 0, 0,   248, 97,  134, 24,  48,  193, 240, 0,   0,   0,
        0, 0,   96,  193, 134, 12,  0,   96,  192, 0,   0,   0, 0, 217, 179, 96,  0,   0,   0,   0,   0,   0,   0,   0,
        0, 0,   209, 167, 230, 154, 126, 104, 208, 0,   0,   0, 0, 16,  243, 119, 6,   6,   14,  236, 240, 128, 0,   0,
        0, 195, 195, 97,  134, 24,  108, 188, 48,  0,   0,   0, 0, 48,  209, 161, 143, 55,  108, 216, 216, 0,   0,   0,
        0, 96,  193, 128, 0,   0,   0,   0,   0,   0,   0,   0, 0, 24,  97,  131, 12,  24,  48,  96,  96,  192, 192, 0,
        0, 192, 193, 129, 131, 6,   12,  48,  97,  134, 0,   0, 0, 0,   0,   6,   198, 63,  24,  216, 0,   0,   0,   0,
        0, 0,   0,   1,   131, 31,  24,  48,  0,   0,   0,   0, 0, 0,   0,   0,   0,   0,   0,   24,  48,  195, 0,   0,
        0, 0,   0,   0,   0,   31,  0,   0,   0,   0,   0,   0, 0, 0,   0,   0,   0,   0,   0,   48,  96,  0,   0,   0,
        0, 12,  48,  97,  131, 12,  24,  96,  195, 0,   0,   0, 0, 0,   0,   1,   131, 0,   0,   48,  96,  0,   0,   0,
        0, 0,   0,   1,   131, 0,   0,   48,  97,  134, 0,   0, 0, 0,   0,   97,  134, 24,  48,  48,  96,  0,   0,   0,
        0, 0,   0,   0,   15,  128, 124, 0,   0,   0,   0,   0, 0, 0,   0,   193, 129, 131, 12,  48,  192, 0,   0,   0,
        0, 0,   243, 48,  97,  134, 0,   48,  96,  0,   0,   0, 0, 0,   243, 54,  109, 191, 110, 192, 248, 0,   0,   0,
        0, 120, 193, 134, 12,  24,  48,  193, 131, 7,   128, 0, 0, 193, 129, 131, 6,   6,   12,  24,  24,  48,  0,   0,
        0, 120, 48,  97,  131, 6,   12,  48,  96,  199, 128, 0, 0, 112, 227, 102, 217, 179, 0,   0,   0,   0,   0,   0,
        0, 0,   0,   0,   0,   0,   0,   0,   3,   248, 0,   0, 0, 96,  96,  0,   0,   0,   0,   0,   0,   0,   0,   0,
        0, 28,  96,  195, 6,   56,  24,  96,  193, 129, 192, 0, 0, 48,  96,  195, 6,   12,  24,  48,  193, 131, 0,   0,
        0, 112, 48,  97,  131, 3,   140, 24,  96,  199, 0,   0, 0, 0,   0,   0,   12,  191, 76,  0,   0,   0,   0,   0,
        0, 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0
    };
};
} // namespace epaperapi::fonts
